{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/common/header.js","webpack:///./src/common/layout.js","webpack:///./src/common/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Index","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_common_seo__WEBPACK_IMPORTED_MODULE_2__","_common_layout__WEBPACK_IMPORTED_MODULE_3__","_ref","posts","data","allMarkdownRemark","edges","a","createElement","title","keywords","className","filter","post","node","frontmatter","length","map","_ref2","key","id","to","path","date","excerpt","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","query","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","color","textDecoration","defaultProps","Layout","Fragment","header","site","siteMetadata","paddingTop","Date","getFullYear","href","_755544856","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","join","arrayOf"],"mappings":"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","file":"component---src-pages-index-js-4bf7121ed787e8b91299.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport SEO from \"../common/seo\"\nimport Layout from \"../common/layout\"\n\nexport default function Index({ data }) {\n  const { edges: posts } = data.allMarkdownRemark\n  return (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n    <div>On this site you'll find tutorials for doing all things mapping-related in GatsbyJS</div>\n    <div className=\"blog-posts\">\n      {posts\n        .filter(post => post.node.frontmatter.title.length > 0)\n        .map(({ node: post }) => {\n          return (\n            <div className=\"blog-post-preview\" key={post.id}>\n              <h1>\n                <Link to={post.frontmatter.path}>{post.frontmatter.title}</Link>\n              </h1>\n              <h2>{post.frontmatter.date}</h2>\n              <p>{post.excerpt}</p>\n            </div>\n          )\n        })}\n    </div>\n  </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `#006600`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          Mapping with GatsbyJS\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: `aaaaa`,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          <main>{children}</main>\n          <footer>\n            © {new Date().getFullYear()}, Built by <a href=\"https://www.andrewl.net\">Andrew Larcombe</a> with\n            {` `}\n            <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}